 global AddObject, ExportMaps
rollout AddObject "选择模型" width:220 height:320
(
	button 'btnConfirm' "确定" pos:[85,285] width:63 height:27 align:#left
	button 'btnConcel' "取消" pos:[153,285] width:63 height:27 align:#left
	Multilistbox 'listbox' "选择要添加的模型" pos:[-1,0] width:218 height:20 selection:1 align:#left
	
	on AddObject open do
	(
		NameCollector = #()
		for g in geometry do
		(
			append NameCollector g.name		
		)	 
		listbox.items = NameCollector
	)
	
	on btnConfirm pressed do
	(
		if listbox.selection.count > 0 then 
		(
			NameCollector = #()
			for g in listbox.selection do
			(
				append NameCollector listbox.items[g]		
			)
				ExportMaps.list.items = NameCollector	
			
		)
		destroyDialog AddObject
	)
	
	on btnConcel pressed do
	(
		destroyDialog AddObject
	)
)

--漫反射贴图
fn printMatDiffuseMap mat = (
    case classof mat of
    (
        blend: (printMat mat.map1; printMat mat.map2)
        compositematerial: (for thisMat in mat.materiallist where thisMat!=undefined do printMat thisMat)
        multimaterial: (for thisMat in mat.materiallist where thisMat!=undefined do printMat thisMat)
        standardmaterial:
        (
            if mat.diffuseMapEnable and classof mat.diffuseMap == Bitmaptexture do (
					return  mat.diffuseMap
                )
        )
    )
)

--凹凸贴图（法线贴图）
fn printMatBumpMap mat = (
    case classof mat of
    (
        blend: (printMat mat.map1; printMat mat.map2)
        compositematerial: (for thisMat in mat.materiallist where thisMat!=undefined do printMat thisMat)
        multimaterial: (for thisMat in mat.materiallist where thisMat!=undefined do printMat thisMat)
        standardmaterial:
        (
            if mat.bumpMapEnable and classof mat.bumpMap == Bitmaptexture do (
                 return mat.bumpMap
                )
        )
    )
)

fn GetCurrentTimeStr =
(
	t = getLocalTime()	
	Year   = t[1] As String
	Month  = t[2] As String
	Day    = t[4] As String
	Hour   = t[5] As String
	Minute = t[6] As String
	Sec    = t[7] As String
	ms     = t[8] As String
	--为什么不能用 ：在文件名！！
	time   = ( Year + "_" + Month + "_" + Day + "_" + 	ms ) As String
	return time
)

rollout ExportMaps "贴图导出" width:312 height:320
(
	button 'btnAddModel' "选取模型" pos:[80,27] width:224 height:29 align:#left
	listBox 'list' "模型列表" pos:[6,7] width:62 height:22 align:#left
	label 'lbl3' "法线贴图" pos:[80,68] width:48 height:20 align:#left
	label 'lbl4' "漫反射贴图" pos:[80,91] width:58 height:20 align:#left
	button 'btnExportCurrent' "导出选中" pos:[80,245] width:224 height:29 align:#left
	button 'btnExportAll' "导出所有" pos:[80,279] width:224 height:29 align:#left
	label 'lblNormal' "无" pos:[143,68] width:154 height:19 align:#left
	label 'lblDiffuse' "无" pos:[142,93] width:154 height:19 align:#left
	checkbox 'chk_normal' "导出法线贴图" pos:[90,137] width:81 height:24 checked:true align:#left
	groupBox 'grp1' "导出设置" pos:[80,118] width:206 height:68 align:#left
	checkbox 'chk_diffuse' "导出漫反射贴图" pos:[90,157] width:94 height:24 checked:true align:#left
	button 'btnPath' "..." pos:[275,214] width:28 height:22 align:#left
	editText 'edt2' "" pos:[78,213] width:190 height:25 align:#left
	label 'lbl10' "导出路径" pos:[83,193] width:48 height:20 align:#left
	
	fn GetGeometryByName name = 
	(
		for g in geometry do
		(
			if g.name == name do
				return g
		)
	 
	)
	
	fn ExportMap object = 
	(
		if edt2.text == "" then
		(
			messagebox "请先设置导出目录"
			return()
		)
		
		local currentSelect = object 
		
		local diffuseMap = printMatDiffuseMap currentSelect.material
		local bumpMap = printMatBumpMap currentSelect.material		
		local newname = edt2.text 
		
		if ( diffuseMap !=undefined and chk_diffuse.checked ) then
		(
			files = getFiles diffuseMap.filename 
			for i in files do
			(
				typename = getFilenameType i
				newfilename =  newname + "\\" + GetCurrentTimeStr() + "_diffuse"+ typename 
				print(copyFile i newfilename)
			)
 
		)
		
		if (bumpMap !=undefined and chk_normal.checked  ) then
		(
			files = getFiles bumpMap.filename 
			for i in files do
			(
				typename = getFilenameType i
				newfilename = newname + "\\" + GetCurrentTimeStr() +  "_normal"+ typename 
				print(copyFile i newfilename)
			)
	 
		)
	)
	
	on btnAddModel pressed do
	(
		try(destroyDialog AddObject)catch()
		createDialog AddObject
	)
		
	on list selected i do
	(
		local currentSelect = GetGeometryByName list.items[i]
		local diffuseMap = printMatDiffuseMap currentSelect.material
		local bumpMap = printMatBumpMap currentSelect.material
		
		lblDiffuse.text= "无"
		lblNormal.text = "无"
		
		if diffuseMap !=undefined then
		(
			lblDiffuse.text = diffuseMap.name	
		)
		
		if bumpMap !=undefined then
		(
			lblNormal.text = bumpMap.name	
		)
	)
	
	on btnPath pressed do
	(
		local MaxFilePath
		local FPath
		FPath=getSavePath caption:"Select Max a Path to save maps"
		if FPath== undefined do
		(
			return()
		)
	   edt2.text= FPath As String
	)
	
	on btnExportCurrent pressed do
	(
	    if list.items.count <= 0 then
			return()
		
	    local object = GetGeometryByName list.items[list.selection]
	    ExportMap object
	)
	
	on btnExportAll pressed do
	(
		if list.items.count <= 0 then
			return()
		
		for name in list.items do
		(
			local object= (GetGeometryByName name)
			ExportMap object
		)
	)
	
)
 
